operation register_user(pubkey, name) {
  require_signed_by_pubkey(pubkey);
  val user = create user(pubkey, name);
  create wallet(user, 100);
}

operation list_auction(pubkey, item: text) {
  val owner = require_user(pubkey);
  val start = op_context.last_block_time;
  val end = start + DAY_IN_MILLIS;
  create auction(owner, item, start, end);
}

operation place_bid(pubkey, rowid, amount: integer) {
  val user = require_user(pubkey);

  val auction = require_auction(rowid);
  require_auction_still_active(auction);
  require_not_owner(pubkey, auction);
  require_highest_bidder(auction, amount);

  deduct_balance(user, amount);

  val timestamp = op_context.last_block_time;
  create bid(auction, user, amount, timestamp);

  if (amount >= auction.buyout) {
    complete_auction(auction);
  }
}

operation settle_auction(rowid) {
  val auction = require_auction(rowid);
  require_auction_finished(auction);
  complete_auction(auction);
}
